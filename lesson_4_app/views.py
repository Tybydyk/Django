from random import randint, choice
from django.http import HttpResponse
import logging
from django.shortcuts import render
from django.core.files.storage import FileSystemStorage
from .forms import GameForm


logger = logging.getLogger(__name__)


def lesson4(request):
    return HttpResponse("<h3>Seminar 4</h3>")


def heads_tails(request, n):
    # logger.info(f'{request}heads_tails page accessed')
    context = {"res": []}
    for _ in range(n):
        context['res'].append(choice(['Heads', 'Tails']))
    return render(request, 'lesson_4_app/gameplay.html', context)


def dice(request, n):
    context = {"res": []}
    for _ in range(n):
        context['res'].append(randint(1, 6))
    return render(request, 'lesson_4_app/gameplay.html', context)


def rand(request, n):
    context = {"res": []}
    for _ in range(n):
        context['res'].append(randint(1, 100))
    return render(request, 'lesson_4_app/gameplay.html', context)

# –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ –±—Ä–æ—Å–∫–∏ –º–æ–Ω–µ—Ç—ã, –∏–≥—Ä–∞–ª—å–Ω–æ–∏ÃÜ –∫–æ—Å—Ç–∏ –∏ —Å–ª—É—á–∞–∏ÃÜ–Ω–æ–≥–æ —á–∏—Å–ª–∞.
# üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ —Ñ–æ—Ä–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å: –º–æ–Ω–µ—Ç–∞, –∫–æ—Å—Ç–∏, —á–∏—Å–ª–∞.
# üìå –í—Ç–æ—Ä–æ–µ –ø–æ–ª–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç 1 –¥–æ 64.

def games(request):
    if request.method == 'POST':
        form = GameForm(request.POST)
        if form.is_valid():
            count = int(form.cleaned_data['count'])
            logger.info(f'count={count} from game {form.cleaned_data["choice"]} accessed')
            match form.cleaned_data['choice']:
                case '1':
                    return heads_tails(request, count)
                case '2':
                    return dice(request, count)
                case '3':
                    return rand(request, count)
    else:
        logger.info(f'Get new form')
        form = GameForm()
    return render(request, 'lesson_4_app/games_form.html', {'form': form})

# –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∞–≤—Ç–æ—Ä–∞–º–∏, —Å—Ç–∞—Ç—å—è–º–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.
# üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –≤ –±–∞–∑—É
# –¥–∞–Ω–Ω—ã—Ö.
# üìå –ò—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å Author

# def create_author(request):
#     if request.method == 'POST':
#         form = AuthorForms(request.POST)
#         if form.is_valid():
#             author = Author(f_name=form.cleaned_data['name'],
#                             l_name=form.cleaned_data['surname'],
#                             email=form.cleaned_data['email'],
#                             biography=form.cleaned_data['biography'],
#                             birthday=form.cleaned_data['birthday'])
#             author.save()
#             # massages.add_message(request, messages.SUCCESS, 'Successfully')
#         else:
#             form = AuthorForms()
#         return render(request, 'autor_form.html', {'form': form})